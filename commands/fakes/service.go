// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/RageZBla/cf-stale-route-detector/detector"
)

type Service struct {
	DetectFromFilesStub        func(string, string, string) (map[string][]detector.StaleRoute, error)
	detectFromFilesMutex       sync.RWMutex
	detectFromFilesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	detectFromFilesReturns struct {
		result1 map[string][]detector.StaleRoute
		result2 error
	}
	detectFromFilesReturnsOnCall map[int]struct {
		result1 map[string][]detector.StaleRoute
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Service) DetectFromFiles(arg1 string, arg2 string, arg3 string) (map[string][]detector.StaleRoute, error) {
	fake.detectFromFilesMutex.Lock()
	ret, specificReturn := fake.detectFromFilesReturnsOnCall[len(fake.detectFromFilesArgsForCall)]
	fake.detectFromFilesArgsForCall = append(fake.detectFromFilesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DetectFromFilesStub
	fakeReturns := fake.detectFromFilesReturns
	fake.recordInvocation("DetectFromFiles", []interface{}{arg1, arg2, arg3})
	fake.detectFromFilesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Service) DetectFromFilesCallCount() int {
	fake.detectFromFilesMutex.RLock()
	defer fake.detectFromFilesMutex.RUnlock()
	return len(fake.detectFromFilesArgsForCall)
}

func (fake *Service) DetectFromFilesCalls(stub func(string, string, string) (map[string][]detector.StaleRoute, error)) {
	fake.detectFromFilesMutex.Lock()
	defer fake.detectFromFilesMutex.Unlock()
	fake.DetectFromFilesStub = stub
}

func (fake *Service) DetectFromFilesArgsForCall(i int) (string, string, string) {
	fake.detectFromFilesMutex.RLock()
	defer fake.detectFromFilesMutex.RUnlock()
	argsForCall := fake.detectFromFilesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Service) DetectFromFilesReturns(result1 map[string][]detector.StaleRoute, result2 error) {
	fake.detectFromFilesMutex.Lock()
	defer fake.detectFromFilesMutex.Unlock()
	fake.DetectFromFilesStub = nil
	fake.detectFromFilesReturns = struct {
		result1 map[string][]detector.StaleRoute
		result2 error
	}{result1, result2}
}

func (fake *Service) DetectFromFilesReturnsOnCall(i int, result1 map[string][]detector.StaleRoute, result2 error) {
	fake.detectFromFilesMutex.Lock()
	defer fake.detectFromFilesMutex.Unlock()
	fake.DetectFromFilesStub = nil
	if fake.detectFromFilesReturnsOnCall == nil {
		fake.detectFromFilesReturnsOnCall = make(map[int]struct {
			result1 map[string][]detector.StaleRoute
			result2 error
		})
	}
	fake.detectFromFilesReturnsOnCall[i] = struct {
		result1 map[string][]detector.StaleRoute
		result2 error
	}{result1, result2}
}

func (fake *Service) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.detectFromFilesMutex.RLock()
	defer fake.detectFromFilesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Service) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
