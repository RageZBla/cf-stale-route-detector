// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/RageZBla/cf-stale-route-detector/detector"
	"github.com/RageZBla/cf-stale-route-detector/presenters"
)

type Presenter struct {
	StaleRoutesStub        func(map[string][]detector.StaleRoute, bool)
	staleRoutesMutex       sync.RWMutex
	staleRoutesArgsForCall []struct {
		arg1 map[string][]detector.StaleRoute
		arg2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Presenter) StaleRoutes(arg1 map[string][]detector.StaleRoute, arg2 bool) {
	fake.staleRoutesMutex.Lock()
	fake.staleRoutesArgsForCall = append(fake.staleRoutesArgsForCall, struct {
		arg1 map[string][]detector.StaleRoute
		arg2 bool
	}{arg1, arg2})
	stub := fake.StaleRoutesStub
	fake.recordInvocation("StaleRoutes", []interface{}{arg1, arg2})
	fake.staleRoutesMutex.Unlock()
	if stub != nil {
		fake.StaleRoutesStub(arg1, arg2)
	}
}

func (fake *Presenter) StaleRoutesCallCount() int {
	fake.staleRoutesMutex.RLock()
	defer fake.staleRoutesMutex.RUnlock()
	return len(fake.staleRoutesArgsForCall)
}

func (fake *Presenter) StaleRoutesCalls(stub func(map[string][]detector.StaleRoute, bool)) {
	fake.staleRoutesMutex.Lock()
	defer fake.staleRoutesMutex.Unlock()
	fake.StaleRoutesStub = stub
}

func (fake *Presenter) StaleRoutesArgsForCall(i int) (map[string][]detector.StaleRoute, bool) {
	fake.staleRoutesMutex.RLock()
	defer fake.staleRoutesMutex.RUnlock()
	argsForCall := fake.staleRoutesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Presenter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.staleRoutesMutex.RLock()
	defer fake.staleRoutesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Presenter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ presenters.Presenter = new(Presenter)
